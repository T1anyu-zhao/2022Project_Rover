module  rgb2hsv(
	input                         clk,rst,	
	input  [7:0]                  red,green,blue,	
	output [8:0] 			      hue,sat,val//  hue 0 - 360	
);

wire [7:0]  max,min,diff;
wire [32:0] hue_f, sat_f, diff_f;
//find max and min

assign max = (red >= green)&&(red >= blue) ? red :
             (green >= red)&&(green >= blue) ? green :blue;
assign min = (red <= green)&&(red <= blue) ? red :
             (green <= red)&&(green <= blue) ? green :blue;    

//v
assign val = max;

//diff

assign diff = max - min;
assign diff_f = {diff,24'b0};

//s
assign sat_f = (max == 0) ? 0 : (diff_f/max)*255; 
assign sat = sat_f[31:24];

//h
parameter degree = {8'b111100,24'b0};//degree of 60'
assign hue_f =  (max == red)   ? (green - blue)*(degree/diff_f):
                (max == green) ? (blue - red)*(degree/diff_f)+2*degree:
                                 (red - green)*(degree/diff_f)+4*degree;

assign hue = hue_f[32:24];


/*
//find max min 1----
assign r_g = (rgb_r > rgb_g)? 1'b1:1'b0; 
assign r_b = (rgb_r > rgb_b)? 1'b1:1'b0; 
assign g_b = (rgb_g > rgb_b)? 1'b1:1'b0; 
always @ (posedge clk or negedge rst)
begin
	if (!rst)
	begin
		max <= 8'd0;
		min <= 8'd0;
		top <= 8'd0;
		rgb_se <= 3'b010;
	end
	else 
	begin
	case ({r_g,r_b,g_b})
	
	3'b000:
			begin//b g r
			max <= rgb_b;
			min <= rgb_r;
			top <= rgb_g - rgb_r;//-
			rgb_se <= 3'b000;
			end
	3'b001:
			begin//g b r
			max <= rgb_g;
			min <= rgb_r;
			top <= rgb_b - rgb_r;//+
			rgb_se <= 3'b001;
			end
	3'b011:
			begin//g r b
			max <= rgb_g;
			min <= rgb_b;
			top <= rgb_r - rgb_b;//-
			rgb_se <= 3'b011;
			end
	3'b100:
			begin//b r g
			max <= rgb_b;
			min <= rgb_g;
			top <= rgb_r - rgb_g;//+
			rgb_se <= 3'b100;
			end
	3'b110:
			begin//r b g
			max <= rgb_r;
			min <= rgb_g;
			top <= rgb_b - rgb_g;//+
			rgb_se <= 3'b110;
			end
	3'b111:
			begin//r g b
			max <= rgb_r;
			min <= rgb_b;
			top <= rgb_g - rgb_b;//-
			rgb_se <= 3'b111;
			end
	default
			begin
			max <= 8'd0;
			min <= 8'd0;
			top <= 8'd0;
			rgb_se <= 3'b010;
			end
	endcase
end
end
// *60   max - min          2-----------------
always @ (posedge clk or negedge rst)
begin
	if (!rst)
		begin
		top_60 <= 14'd0;
		rgb_se_n <= 3'b010;
		max_min <= 8'd0;
		max_n <= 8'd0;
		end
	else
		begin
		top_60 <= {top,6'b000000} - {top,2'b00};//60 = 2^6 - 2^2
		rgb_se_n <= rgb_se;
		max_min <= max - min;
		max_n <= max;
		end
end
//   /(max - min)    3----------------------
always @ (*)
begin
	division = (max_min > 8'd0) ? top_60 / max_min : 8'd240;//注意max = min  
end
// + - 120 240 360
always @ (posedge clk or negedge rst)
begin
	if (!rst)
	
		hsv_h <= 9'd0;
	
	else 
	begin
	case (rgb_se_n)
	
	3'b000:
			//b g r
			hsv_h <= 9'd240 - division;//-
			
	3'b001:
			//g b r
			hsv_h <= 9'd120 + division;//+
			
	3'b011:
			//g r b
			hsv_h <= 9'd120 - division;//-
			
	3'b100:
			//b r g
			hsv_h <= 9'd240 + division;//+
			
	3'b110:
			//r b g
			hsv_h <= 9'd360 - division;//-
			
			
	3'b111:
			//r g b
			hsv_h <= division;//+
			
	default
			hsv_h <= 9'd0;
	endcase
end
end

//  s=(max - min)/max * 256
always @ (*)
begin
	hsv_s_m = (max_n > 8'd0)? {max_min[7:0],8'b00000000} / max_n : 8'd0;
end
always@(posedge clk or negedge rst)
begin
	if (!rst)
      hsv_s <= 8'd0;
	else
	hsv_s <= hsv_s_m;
end
//  hsv_v = max
always@(posedge clk or negedge rst)
begin
  if (!rst)
  hsv_v <= 8'd0;
  else
  hsv_v <= max_n;
 end
 // 3-------------------

*/

/*
parameter a=8'hff;
reg [15:0]product_s;
wire [7:0]max_minus_min;
reg signed [8:0]difference;
wire [8:0] div_out;
//max and min
always@(posedge clk)begin
	if(red==green&&red==blue)begin
		max <=red;
		min<=red;
	end
	else begin
		if(red>=green&&red>=blue)begin
			max<=red;
			if(green>=blue)begin
				min<=blue;
			end
			else if(blue>=green)begin
				min<=green;
			end
		end
		else if(green>=red&&green>=blue)begin
			max<=green;
			if(red>=blue)begin
				min<=blue;
			end
			else if(blue>=red)begin
				min<=red;
			end
		end
		else if(blue>=green&&blue>=red)begin
			max<=blue;
			if(green>=red)begin
				min<=red;
			end
			else if(red>=green)begin
				min<=green;
			end
		end
	end
end
//v
always @(posedge clk)begin
	v<=max;
end
//s
assign max_minus_min=max-min;
always @(posedge clk)begin
	if(max==8'b0)begin
		s<=8'b0;
	end
	else begin
		product_s<=a*(max-min)/max;
		s<=product_s[7:0];
	end	
end
//h
always @(posedge clk)begin
	if(max==min)begin 
		h<=8'b0;
	end
	else if(max==red) begin
		difference<=green-blue;
			if(min==blue)begin
				h<=60*div_out;
			end
			else if(min==green)begin
				h<=360+60*div_out;
			end
	end
	else if(max==green)begin
		difference<=blue-red;
		h<=120+60*div_out;
	end
	else if(max==blue)begin
		difference<=red-green;
		h<=240+60*div_out;
	end
end
divide9	divide9_inst (
	.denom ( difference),
	.numer ( max_minus_min ),
	.quotient ( div_out )
);
*/

endmodule