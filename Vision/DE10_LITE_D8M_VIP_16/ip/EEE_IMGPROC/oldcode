module EEE_IMGPROC(
	// global clock & reset
	clk,
	reset_n,
	
	// mm slave
	s_chipselect,
	s_read,
	s_write,
	s_readdata,
	s_writedata,
	s_address,

	// stream sink
	sink_data,
	sink_valid,
	sink_ready,
	sink_sop,
	sink_eop,
	
	// streaming source
	source_data,
	source_valid,
	source_ready,
	source_sop,
	source_eop,
	
	// conduit
	mode
	
);


// global clock & reset
input	clk;
input	reset_n;

// mm slave
input							s_chipselect;
input							s_read;
input							s_write;
output	reg	[31:0]	s_readdata;
input	[31:0]				s_writedata;
input	[2:0]					s_address;


// streaming sink
input	[23:0]            	sink_data;
input								sink_valid;
output							sink_ready;
input								sink_sop;
input								sink_eop;

// streaming source
output	[23:0]			  	   source_data;
output								source_valid;
input									source_ready;
output								source_sop;
output								source_eop;

// conduit export
input                         mode;

////////////////////////////////////////////////////////////////////////
//
parameter IMAGE_W = 11'd640;
parameter IMAGE_H = 11'd480;
parameter MESSAGE_BUF_MAX = 256;
parameter MSG_INTERVAL = 6;
parameter BB_COL_DEFAULT = 24'h00ff00;


wire [7:0]   red, green, blue, grey;// 00 ff 00
wire [7:0]   red_out, green_out, blue_out;

wire         sop, eop, in_valid, out_ready;
////////////////////////////////////////////////////////////////////////

//HSV method; find the max and min of RGB
wire [7:0]  max_pixel, min_pixel; 


assign  max_pixel = (red >= green) ? ( (red >= blue) ? red[7:0] : blue[7:0] ): ( (red >= green) ? red[7:0] : green[7:0] );
assign	min_pixel = (red < green) ? ( (red < blue) ? red[7:0] : blue[7:0] ) : ( (green < blue) ? green[7:0] : blue[7:0] ); 

//implement the transfer function of the hsv method.


wire rg,gb,rb;
//wire [2:0] criterion;
assign rg = (red > green) ? 1'b1 : 0;
assign gb = (green > blue) ? 1'b1 : 0;
assign rb = (red > blue) ? 1'b1 :0;

/*
reg [7:0] value, saturation;
reg	[8:0]	hue;
always @(*) begin
	case ({rg,rb,gb})

		3'b111: begin//rgb
		 	hue = (green - blue)/(max_pixel - min_pixel)*60;
			saturation = 255*(max_pixel - min_pixel)/max_pixel; 
			value = max_pixel;
		end
		3'b110: begin//rbg
			hue = 360 + (green - blue)/(max_pixel - min_pixel)*60;
			saturation = 255*(max_pixel - min_pixel)/max_pixel; 
			value = max_pixel;
		end
		3'b011: begin//grb
			hue = 120 + (blue - green)/(max_pixel-min_pixel)* 60;
			saturation = 255*(max_pixel - min_pixel)/max_pixel; 
			value = max_pixel;
		end
		3'b001: begin//gbr
			hue = 120 + (blue - green)/(max_pixel-min_pixel)* 60;
			saturation = 255*(max_pixel - min_pixel)/max_pixel; 
			value = max_pixel;
		end	
		3'b100: begin//brg
			hue = 240 + (red - green)/(max_pixel-min_pixel)* 60;
			saturation = 255*(max_pixel - min_pixel)/max_pixel; 
			value = max_pixel;
		end	
		3'b000: begin//bgr
			hue = 240 + (red - green)/(max_pixel-min_pixel)* 60;
			saturation = 255*(max_pixel - min_pixel)/max_pixel; 
			value = max_pixel;
		end	
		default : begin
			hue = 0 ;
			saturation = 255*(max_pixel - min_pixel)/max_pixel; 
			value = max_pixel;
		end
	endcase
end
*/

/*
wire [7:0] value, saturation;
wire [8:0] hue;
assign value = max_pixel [7:0];
assign saturation = (max_pixel - min_pixel)*255/max_pixel;
assign hue = (max_pixel == min_pixel) ? 0 : (
			 (max_pixel == red) ? 
			 	( (green < blue) ? ( ((green - blue)/(max_pixel - min_pixel))*60 +360 ) : ( ((green - blue)/(max_pixel - min_pixel)) *60 ) )
			  	: ( (max_pixel == green) ? ( ((blue - red)/(max_pixel - min_pixel))*60+120 ) : ( ((red - green)/(max_pixel - min_pixel))*60+240 ) )
			);
*/
/*
assign hue = (red == green && red == blue) ? 0 :((value != red)? (value != green) ? (((240*((value - min_pixel))+ (60* (red - green)))/(value-min_pixel))>>1):
                ((120*(value-min_pixel)+60*(blue - red))/(value - min_pixel)>>1): 
                (blue < green) ? ((60*(green - blue)/(value - min_pixel))>>1): (((360*(value-min_pixel) +(60*(green - blue)))/(value - min_pixel))>>1));

*/
// Detect red areas
//wire red_detect, green_detect, blue_detect;
//assign red_detect = red[7] & ~green[7] & ~blue[7]; 
//assign green_detect = ~red[7] & green[7] & ~blue[7];
//assign blue_detect = ~red[7] & ~green[7] & blue[7];

wire orange_ball_detect,green_ball_detect;
reg orange_prev_pixel, orange_prev_pixel2;
reg green_prev_pixel, green_prev_pixel2;

assign orange_ball_detect = (
							   ( (hue >= 16 && hue <=25) && (saturation > 133 && value > 124) ) 
							|| ( (hue >= 23 && hue <= 30) 
									&& (
										(value > 155 && saturation > 127)||(saturation >= 153 && value > 252)||(value > 100 && saturation > 247)
										)
								)
							);

assign green_ball_detect = ( (110 < hue < 130) && ( 204 < saturation < 255) && (177 < value < 256) );

/*
always @(posedge clk) begin
	orange_prev_pixel2 <= orange_prev_pixel;
	orange_prev_pixel <= orange_ball_detect;// single pixel will be considered as noise pixel.
	green_prev_pixel2 <= green_prev_pixel;
	green_prev_pixel <= green_ball_detect;
end
*/

// Find boundary of cursor box
//colour parameter
//assign orange_ball_detect = ( ( 40 < hue < 60) && ( 190 < saturation < 220 ) && ( 200 < value < 255));

// Highlight detected areas
wire [23:0] colour_high;//, green_high, blue_high;
assign grey = green[7:1] + red[7:2] + blue[7:2]; //Grey = green/2 + red/4 + blue/4
assign colour_high  =  (orange_ball_detect /*&& orange_prev_pixel && orange_prev_pixel2*/ ) ? {8'hea,8'h9d,8'h1b} 
							: ( (green_ball_detect /*&& green_prev_pixel && green_prev_pixel2 */) ? {8'h00,8'hcc,8'h00} 
							:{grey, grey, grey});

// Show bounding box
wire [23:0] new_image_orange,new_image_green;
wire bb_active_orange,bb_active_green;
assign bb_active_orange = (x == left_o) | (x == right_o) | (y == top_o) | (y == bottom_o);
assign bb_active_green = (x == left_g) | (x == right_g) | (y == top_g) | (y == bottom_g);
assign new_image_orange = bb_active_orange ? /*bb_colXXXX*/{8'hff,8'h00,8'h00} : colour_high;  //bounded box colour setting
assign new_image_green = bb_active_green ? {8'h00,8'hff,8'h00} : new_image_orange;


/*
wire [23:0] new_image_violent;
wire bb_active_violent;
assign bb_active_violent = (x == left_v | (x == right_v) | (y == top_v) | (y == bottom_v);
assign new_image_violent = bb_active_violent ? {8'hff,8'hff,8'h00} : new image prev; //add on previous image

wire [23:0] new_image_XXX;
wire bb_active_XXX;
assign bb_active_XXX = (x == left_v | (x == right_v) | (y == top_v) | (y == bottom_v);
assign new_image_XXX = bb_active_violent ? {8'hff,8'h00,8'hff} : new_image_prev;

*/


// Switch output pixels depending on mode switch
// Don't modify the start-of-packet word - it's a packet discriptor
// Don't modify data in non-video packets
assign {red_out, green_out, blue_out} = (mode & ~sop & packet_video) ? new_image_green : {red,green,blue};

//Count valid pixels to tget the image coordinates. Reset and detect packet type on Start of Packet.
reg [10:0] x, y;
reg packet_video;
always@(posedge clk) begin
	if (sop) begin
		x <= 11'h0;
		y <= 11'h0;
		packet_video <= (blue[3:0] == 3'h0);
	end
	else if (in_valid) begin
		if (x == IMAGE_W-1) begin
			x <= 11'h0;
			y <= y + 11'h1;
		end
		else begin
			x <= x + 11'h1;
		end
	end
end

//Find first and last red pixels
reg [10:0] x_min_o, y_min_o, x_max_o, y_max_o;
reg [10:0] x_min_g, y_min_g, x_max_g, y_max_g;

always@(posedge clk) begin
	if (orange_ball_detect && in_valid) begin	//Update bounds when the pixel is red
		if (x < x_min_o) x_min_o <= x;
		if (x > x_max_o) x_max_o <= x;
		if (y < y_min_o) y_min_o <= y;
		y_max_o <= y;
	end
	if (green_ball_detect && in_valid) begin
		if (x < x_min_g ) x_min_g <= x;
		if (x > x_max_g) x_max_g <= x;
		if (y < y_min_g) y_min_g <= y;
		y_max_g <= y;
	end	
	if (sop & in_valid) begin	//Reset bounds on start of packet
		x_min_o <= IMAGE_W-11'h1;
		x_max_o <= 0;
		y_min_o <= IMAGE_H-11'h1;
		y_max_o <= 0;

		x_min_g <= IMAGE_W-11'h1;
		x_max_g <= 0;
		y_min_g <= IMAGE_H-11'h1;
		y_max_g <= 0;
	end
end

//Process bounding box at the end of the frame.
reg [1:0] msg_state;
reg [10:0] left_o, right_o, top_o, bottom_o;
reg [10:0] left_g, right_g, top_g, bottom_g;

reg [7:0] frame_count;
always@(posedge clk) begin
	if (eop & in_valid & packet_video) begin  //Ignore non-video packets
		
		//Latch edges for display overlay on next frame
		left_o <= x_min_o;
		right_o <= x_max_o;
		top_o <= y_min_o;
		bottom_o <= y_max_o;

		left_g <= x_min_g;
		right_g <= x_max_g;
		top_g <= y_min_g;
		bottom_g <= y_max_g;
		
		
		//Start message writer FSM once every MSG_INTERVAL frames, if there is room in the FIFO
		frame_count <= frame_count - 1;
		
		if (frame_count == 0 && msg_buf_size < MESSAGE_BUF_MAX - 3) begin
			msg_state <= 2'b01;
			frame_count <= MSG_INTERVAL-1;
		end
	end
	
	//Cycle through message writer states once started
	if (msg_state != 2'b00) msg_state <= msg_state + 2'b01;

end
	
//Generate output messages for CPU
reg [31:0] msg_buf_in; 
wire [31:0] msg_buf_out;
reg msg_buf_wr;
wire msg_buf_rd, msg_buf_flush;
wire [7:0] msg_buf_size;
wire msg_buf_empty;

`define RED_BOX_MSG_ID "RBB"

always@(*) begin	//Write words to FIFO as state machine advances
	case(msg_state)
		2'b00: begin
			msg_buf_in = 32'b0;
			msg_buf_wr = 1'b0;
		end
		2'b01: begin
			msg_buf_in = `RED_BOX_MSG_ID;	//Message ID
			msg_buf_wr = 1'b1;
		end
		2'b10: begin
			msg_buf_in = {5'b0, x_min_o, 5'b0, y_min_o};	//Top left coordinate
			msg_buf_wr = 1'b1;
		end
		2'b11: begin
			msg_buf_in = {5'b0, x_max_o, 5'b0, y_max_o}; //Bottom right coordinate
			msg_buf_wr = 1'b1;
		end
	endcase
end


//Output message FIFO
MSG_FIFO	MSG_FIFO_inst (
	.clock (clk),
	.data (msg_buf_in),
	.rdreq (msg_buf_rd),
	.sclr (~reset_n | msg_buf_flush),
	.wrreq (msg_buf_wr),
	.q (msg_buf_out),
	.usedw (msg_buf_size),
	.empty (msg_buf_empty)
	);


//Streaming registers to buffer video signal
STREAM_REG #(.DATA_WIDTH(26)) in_reg (
	.clk(clk),
	.rst_n(reset_n),
	.ready_out(sink_ready),
	.valid_out(in_valid),
	.data_out({red,green,blue,sop,eop}),
	.ready_in(out_ready),
	.valid_in(sink_valid),
	.data_in({sink_data,sink_sop,sink_eop})
);

STREAM_REG #(.DATA_WIDTH(26)) out_reg (
	.clk(clk),
	.rst_n(reset_n),
	.ready_out(out_ready),
	.valid_out(source_valid),
	.data_out({source_data,source_sop,source_eop}),
	.ready_in(source_ready),
	.valid_in(in_valid),
	.data_in({red_out, green_out, blue_out, sop, eop})
);


/////////////////////////////////
/// Memory-mapped port		 /////
/////////////////////////////////

// Addresses
`define REG_STATUS    			0
`define READ_MSG    				1
`define READ_ID    				2
`define REG_BBCOL					3

//Status register bits
// 31:16 - unimplemented
// 15:8 - number of words in message buffer (read only)
// 7:5 - unused
// 4 - flush message buffer (write only - read as 0)
// 3:0 - unused


// Process write

reg  [7:0]   reg_status;
reg	[23:0]	bb_col;

always @ (posedge clk)
begin
	if (~reset_n)
	begin
		reg_status <= 8'b0;
		bb_col <= BB_COL_DEFAULT;
	end
	else begin
		if(s_chipselect & s_write) begin
		   if      (s_address == `REG_STATUS)	reg_status <= s_writedata[7:0];
		   if      (s_address == `REG_BBCOL)	bb_col <= s_writedata[23:0];
		end
	end
end


//Flush the message buffer if 1 is written to status register bit 4
assign msg_buf_flush = (s_chipselect & s_write & (s_address == `REG_STATUS) & s_writedata[4]);


// Process reads
reg read_d; //Store the read signal for correct updating of the message buffer

// Copy the requested word to the output port when there is a read.
always @ (posedge clk)
begin
   if (~reset_n) begin
	   s_readdata <= {32'b0};
		read_d <= 1'b0;
	end
	
	else if (s_chipselect & s_read) begin
		if   (s_address == `REG_STATUS) s_readdata <= {16'b0,msg_buf_size,reg_status};
		if   (s_address == `READ_MSG) s_readdata <= {msg_buf_out};
		if   (s_address == `READ_ID) s_readdata <= 32'h1234EEE2;
		if   (s_address == `REG_BBCOL) s_readdata <= {8'h0, bb_col};
	end
	
	read_d <= s_read;
end

//Fetch next word from message buffer after read from READ_MSG
assign msg_buf_rd = s_chipselect & s_read & ~read_d & ~msg_buf_empty & (s_address == `READ_MSG);
						


endmodule

